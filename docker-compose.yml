version: "3"

services:

    postgres:
        image: postgres:17
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PORT: ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        volumes:
            - db-data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready --dbname ${POSTGRES_DB} --username ${POSTGRES_USER}" ]
            interval: 1s
            timeout: 5s
        networks:
            - network-1

    mongo:
        image: mongo:6.0.19-jammy
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
            MONGO_INITDB_DATABASE: ${MONGO_DB}
        ports:
            - ${MONGO_PORT}:${MONGO_PORT}
        volumes:
            - mongo-data:/data/db
        healthcheck:
            test: [ "CMD-SHELL", "mongo --host mongo --eval 'db.adminCommand({ ping: 1 })'" ]
            interval: 1s
            timeout: 5s
        networks:
            - network-2

    migrator:
        build: tern
        command:
            - migrate
            - --conn-string
            - postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
            - --migrations
            - /migrations
        networks:
            - network-1
        depends_on:
            postgres:
                condition: service_healthy

    mailhog:
        image: mailhog/mailhog
        ports:
            - ${MAILHOG_PORT}:${MAILHOG_PORT}
            - ${WEB_MAILHOG_PORT}:${WEB_MAILHOG_PORT}
        networks:
            - network-1

    broker-service:
        build:
            context: ./broker-service
            dockerfile: broker-service.dockerfile
        ports:
            - ${BROKER_SERVICE_PORT}:${BROKER_SERVICE_PORT}
        environment:
            PORT: ${BROKER_SERVICE_PORT}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        networks:
            - network-1

    auth-service:
        build:
            context: ./auth-service
            dockerfile: auth-service.dockerfile
        ports:
            - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
        environment:
            PORT: ${AUTH_SERVICE_PORT}
            POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        networks:
            - network-1
        depends_on:
            - migrator

    logger-service:
        build:
            context: ./logger-service
            dockerfile: logger-service.dockerfile
        ports:
            - ${LOGGING_SERVICE_PORT}:${LOGGING_SERVICE_PORT}
        environment:
            PORT: ${LOGGING_SERVICE_PORT}
            RPC_PORT: ${RPC_LOGGING_SERVICE_PORT}
            GRPC_PORT: ${GRPC_LOGGING_SERVICE_PORT}
            MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:${MONGO_PORT}
            MONGO_USER: ${MONGO_USER}
            MONGO_PASSWORD: ${MONGO_PASSWORD}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        depends_on:
            -   mongo
        networks:
            - network-1
            - network-2

volumes:
    db-data:
    mongo-data:

networks:
    network-1:
    network-2: