version: "3"

services:

    postgres:
        image: postgres:17
        container_name: postgres
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PORT: ${POSTGRES_PORT}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        volumes:
            - db-data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready --dbname ${POSTGRES_DB} --username ${POSTGRES_USER}" ]
            interval: 1s
            timeout: 5s
        networks:
            - network-1

    migrator:
        container_name: migrator
        build: tern
        command:
            - migrate
            - --conn-string
            - postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
            - --migrations
            - /migrations
        networks:
            - network-1
        depends_on:
            postgres:
                condition: service_healthy

    mailhog:
        image: mailhog/mailhog
        container_name: mailhog
        ports:
            - ${MAILHOG_PORT}:${MAILHOG_PORT}
            - ${WEB_MAILHOG_PORT}:${WEB_MAILHOG_PORT}
        networks:
            - network-3

    elasticsearch:
        image: elasticsearch:8.16.1
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=true
            - xpack.security.enrollment.enabled=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ports:
            - "9200:9200"
        volumes:
            - elastic_data:/usr/share/elasticsearch/data
        networks:
            - net-logging

    kibana:
        image: kibana:8.16.1
        container_name: kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELASTICSEARCH_PORT}
        ports:
            - ${KIBANA_PORT}:${KIBANA_PORT}
        depends_on:
            - elasticsearch

    broker-service:
        build:
            context: ./broker-service
            dockerfile: broker-service.dockerfile
        ports:
            - ${BROKER_SERVICE_PORT}:${BROKER_SERVICE_PORT}
        environment:
            PORT: ${BROKER_SERVICE_PORT}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        networks:
            - network-1

    auth-service:
        build:
            context: ./auth-service
            dockerfile: auth-service.dockerfile
        ports:
            - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
        environment:
            PORT: ${AUTH_SERVICE_PORT}
            POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        networks:
            - network-1
        depends_on:
            - migrator

    logger-service:
        build:
            context: ./logger-service
            dockerfile: logger-service.dockerfile
        ports:
            - ${LOGGING_SERVICE_PORT}:${LOGGING_SERVICE_PORT}
        environment:
            PORT: ${LOGGING_SERVICE_PORT}
            RPC_PORT: ${RPC_LOGGING_SERVICE_PORT}
            GRPC_PORT: ${GRPC_LOGGING_SERVICE_PORT}
            ELASTICSEARCH_URL: http://elasticsearch:${ELASTICSEARCH_PORT}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        depends_on:
            -   elasticsearch
        networks:
            - network-1
            - net-logging

    mail-service:
        build:
            context: ./mail-service
            dockerfile: mail-service.dockerfile
        ports:
            - ${MAIL_SERVICE_PORT}:${MAIL_SERVICE_PORT}
        environment:
            PORT: ${MAIL_SERVICE_PORT}
            MAIL_DOMAIN: ${MAIL_DOMAIN}
            MAIL_HOST: ${MAIL_HOST}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
            MAIL_FROM_NAME: ${MAIL_FROM_NAME}
            MAIL_ENCRYPTION: ${MAIL_ENCRYPTION}
        deploy:
            mode: replicated
            replicas: 1
        restart: always
        depends_on:
            -   mailhog
        networks:
            - network-1
            - network-3

volumes:
    db-data:
    elastic_data:

networks:
    network-1:
    net-logging:
    network-3: